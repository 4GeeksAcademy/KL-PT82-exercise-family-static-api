class FamilyStructure:
    # Manages family members as dicts with id, first_name, last_name, age, lucky_numbers

    def __init__(self, last_name):
        self.last_name = last_name
        self._next_id = 1
        self._members = []

        # Preload initial family members
        self.add_member({"first_name": "John", "age": 33, "lucky_numbers": [7, 13, 22]})
        self.add_member({"first_name": "Jane", "age": 35, "lucky_numbers": [10, 14, 3]})
        self.add_member({"first_name": "Jimmy", "age": 5, "lucky_numbers": [1]})

    def _generate_id(self):
        # Generate unique incremental ID
        generated_id = self._next_id
        self._next_id += 1
        return generated_id

    def add_member(self, member):
        # Add new member with validation and autogenerated id if needed
        if "id" not in member or not isinstance(member["id"], int):
            member["id"] = self._generate_id()
        member["last_name"] = self.last_name

        if "first_name" not in member or not isinstance(member["first_name"], str):
            raise ValueError("first_name must be a string")

        if "age" not in member or not isinstance(member["age"], int) or member["age"] <= 0:
            raise ValueError("age must be an integer greater than 0")

        if ("lucky_numbers" not in member or
            not isinstance(member["lucky_numbers"], list) or
            not all(isinstance(num, int) for num in member["lucky_numbers"])):
            raise ValueError("lucky_numbers must be a list of integers")

        self._members.append(member)
        return member

    def delete_member(self, id):
        # Delete member by id, return True if found/deleted else False
        for i, member in enumerate(self._members):
            if member["id"] == id:
                self._members.pop(i)
                return True
        return False

    def get_member(self, id):
        # Return member dict by id or None if not found
        for member in self._members:
            if member["id"] == id:
                return member
        return None

    def get_all_members(self):
        # Return list of all members
        return self._members
